require 'pry'
class TeamComp < ActiveRecord::Base
  include PgSearch
  acts_as_votable

  validates :name, presence: true
  validates :objective, presence: true
  validates :description, presence: true
  validates :author, presence: true
  validate :validate_hero_ids
  after_validation :sort_hero_ids

  has_many :comments
  belongs_to :author, class_name: "User"
  belongs_to :hero1, class_name: "Hero"
  belongs_to :hero2, class_name: "Hero"
  belongs_to :hero3, class_name: "Hero"
  belongs_to :hero4, class_name: "Hero"
  belongs_to :hero5, class_name: "Hero"
  belongs_to :hero6, class_name: "Hero"

  pg_search_scope :search_by_name, :against => :name
  pg_search_scope :search_by_objective, :against => :objective
  pg_search_scope :search_by_description, :against => :description

  #This is the method that will run whenever a search is being performed where heroes are specified.
  def self.search_heroes(ids)
    comps = all
    #sorts ids into ascending order numerically
    ids.compact!.sort!
    #creates a 2D array, where each element is of the form [hero_id, number of copies of the hero_id, starting point for the search]
    sorted_ids = ids.uniq.map { |hero_id| [hero_id, ids.count(hero_id), ids.index(hero_id)] }
    #gradually filters comps using the self.search_hero method, doing so once for every unique hero_id given.
    sorted_ids.each { |sorted_id| comps = comps.select {|comp| search_hero(comps, sorted_id, ids.length).include?(comp)} }
    comps
  end

  #This is the method that self.search_heroes uses on each hero_id to pick out valid team comps.
  def self.search_hero(comps, sorted_id, length)
    sorted_comps = []
    #Starts at the first hero_id column that the sorted_id could show up in, and goes until the last possible one.
    (sorted_id[2] + 1).step(by: 1, to: (7 - (length - sorted_id[2]) ) ) do |i|
      sort_cluster = comps
      #Filters sort_cluster once for every instance of a given hero, selecting only the team_comps where the hero shows up the given number of times.
      sorted_id[1].times do |n|
        sort_cluster = sort_cluster.select{|comp| comp.send(:"hero#{i+n}_id") == sorted_id[0]}
      end
      #Adds the cluster generated by the above line to sorted_comps.
      sorted_comps += sort_cluster
    end
    sorted_comps.uniq
  end


  def sort_hero_ids
    unless hero_ids.any?{|hero_id| hero_id == nil}
      heroes = hero_ids.sort
      1.step(by: 1, to: 6){|i| send(:"hero#{i.to_s}_id=", heroes[i-1])}
    end
  end

  def hero_ids
    hero_ids = []
    1.step(by: 1, to: 6){|i| hero_ids.push(send(:"hero#{i.to_s}_id"))}
    hero_ids
  end

  def validate_hero_ids
    errors.add(:heroes, "can't be blank.") if hero_ids.any?{|hero_id| hero_id == nil}
  end

  def score
  self.get_upvotes.size - self.get_downvotes.size
  end

end
